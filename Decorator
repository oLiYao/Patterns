interface DataSource is
    method writeData(data)
    method readData():data


class FileDataSource implements DataSource is
    constructor FileDataSource(filename) { ... }

    method writeData(data) is
       

    method readData():data is
       


class DataSourceDecorator implements DataSource is
    protected field wrappee: DataSource

    constructor DataSourceDecorator(source: DataSource) is
        wrappee = source

    method writeData(data) is
        wrappee.writeData(data)

    method readData():data is
        return wrappee.readData()


class EncryptionDecorator extends DataSourceDecorator is
    method writeData(data) is
     

    method readData():data is
     


class CompressionDecorator extends DataSourceDecorator is
    method writeData(data) is
 

    method readData():data is
      


class Application is
    method dumbUsageExample() is
        source = new FileDataSource("somefile.dat")
        source.writeData(salaryRecords)
        

        source = new CompressionDecorator(source)
        source.writeData(salaryRecords)
     

        source = new EncryptionDecorator(source)
 

        source.writeData(salaryRecords)
   



class SalaryManager is
    field source: DataSource

    constructor SalaryManager(source: DataSource) { ... }

    method load() is
        return source.readData()

    method save() is
        source.writeData(salaryRecords)



class ApplicationConfigurator is
    method configurationExample() is
        source = new FileDataSource("salary.dat")
        if (enabledEncryption)
            source = new EncryptionDecorator(source)
        if (enabledCompression)
            source = new CompressionDecorator(source)

        logger = new SalaryManager(source)
        salary = logger.load()
